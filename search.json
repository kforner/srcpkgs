[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/demo.html","id":"overview-of-the-srcpkgs_lotr_demo-collection","dir":"Articles","previous_headings":"","what":"overview of the srcpkgs_lotr_demo collection","title":"why would you need srcpkgs?","text":"consists currently 11 related packages, tree structure: legolas galadriel bilbo frodo gimli aragorn gandalf elrond N.B: lotr depends packages, except elrond (yet). dependencies implemented mix Imports, Imports namespace imports Depends.","code":""},{"path":"/articles/demo.html","id":"using-devtools","dir":"Articles","previous_headings":"","what":"using devtools","title":"why would you need srcpkgs?","text":"","code":"suppressPackageStartupMessages(library(devtools)) pkgs <- c('bilbo', 'frodo', 'hobbits', 'legolas', 'galadriel', 'elves', 'gimli', 'aragorn', 'gandalf', 'lotr')"},{"path":"/articles/demo.html","id":"loading","dir":"Articles","previous_headings":"using devtools","what":"loading","title":"why would you need srcpkgs?","text":"devtools designed manage single source package. Let’s use load lotr source package: –> devtools can load lotr since can possibly find hobbits package, dependency. Let’s help : –> problem must load packages, following dependencies order. Note also need roxygenize (using document()) finally can load ","code":"load_all('lotr') ## ℹ Loading lotr ## Error in `load_depends()`: ## ! The package \"hobbits\" is required. load_all('hobbits') ## ℹ Loading hobbits ## Error in `load_depends()`: ## ! The package \"bilbo\" is required. document('frodo') load_all('frodo') document('bilbo') load_all('frodo') document('hobbits') load_all('hobbits')  document('legolas') load_all('legolas') document('galadriel') load_all('galadriel') document('elves') load_all('elves')  document('gimli') load_all('gimli') document('aragorn') load_all('aragorn') document('gandalf') load_all('gandalf') document('lotr') ## ℹ Updating lotr documentation ## ℹ Setting RoxygenNote to \"7.3.3\" ## ℹ Loading lotr ## Writing NAMESPACE ## Writing lotr.Rd load_all('lotr') ## ℹ Loading lotr # use it str(lotr()) ## List of 5 ##  $ hobbits:List of 2 ##   ..$ frodo:List of 4 ##   .. ..$ first  : chr \"Frodo\" ##   .. ..$ last   : chr \"Baggins\" ##   .. ..$ weapons: chr [1:2] \"sting\" \"barrow-blade\" ##   .. ..$ race   : chr \"hobbit\" ##   ..$ bilbo:List of 4 ##   .. ..$ first  : chr \"Bilbo\" ##   .. ..$ last   : chr \"Baggins\" ##   .. ..$ weapons: chr \"sting\" ##   .. ..$ race   : chr \"hobbit\" ##  $ elves  :List of 2 ##   ..$ galadriel:List of 4 ##   .. ..$ first  : chr \"Galadriel\" ##   .. ..$ last   : chr NA ##   .. ..$ weapons: chr \"nenya\" ##   .. ..$ race   : chr \"elf\" ##   ..$ legolas  :List of 4 ##   .. ..$ first  : chr \"Legolas\" ##   .. ..$ last   : chr \"Greenleaf\" ##   .. ..$ weapons: chr \"nebownya\" ##   .. ..$ race   : chr \"elf\" ##  $ dwarves:List of 1 ##   ..$ gimli:List of 4 ##   .. ..$ first  : chr \"Gimli\" ##   .. ..$ last   : chr \"Durin\" ##   .. ..$ weapons: chr \"axe\" ##   .. ..$ race   : chr \"dwarf\" ##  $ humans :List of 1 ##   ..$ aragorn:List of 4 ##   .. ..$ first  : chr \"Aragorn\" ##   .. ..$ last   : chr \"Strider\" ##   .. ..$ weapons: chr \"anduril\" ##   .. ..$ race   : chr \"human\" ##  $ ainur  :List of 1 ##   ..$ gandalf:List of 4 ##   .. ..$ first  : chr \"Gandalf\" ##   .. ..$ last   : chr \"Mithrandir\" ##   .. ..$ weapons: chr \"glamdring\" ##   .. ..$ race   : chr \"ainur\""},{"path":"/articles/demo.html","id":"editing-and-reloading","dir":"Articles","previous_headings":"using devtools","what":"editing and reloading","title":"why would you need srcpkgs?","text":"Let’s modify one direct dependency lotr, e.g. hobbits package. Currently: Edit hobbits/R/main.R comment bilbo, comes bilbo package Depends. Let’s try apply changes: –> load_all() can properly reload package, since know dependency modified. apply changes: –> now works. Note load_all() now able force unload package even though needed another package: : Note now lotr broken: Let’s fix ","code":"names(lotr()$hobbits) ## [1] \"frodo\" \"bilbo\" lines <- readLines('hobbits/R/main.R') cat(lines, sep = '\\n') ## #' list the available hobbits ## #' @return hobbit names as character ## #' @export ## hobbits <- function() { ##   res <- list() ##   # N.B: easier to edit programmatically in the vignette this way ##   res$frodo <- frodo::frodo() # in imports ##   res$bilbo <- bilbo()  ##  ##   res ## } edited_lines <- grep('bilbo', lines, invert = TRUE, value = TRUE) writeLines(edited_lines, 'hobbits/R/main.R') load_all('lotr') ## ℹ Loading lotr names(lotr()$hobbits) ## [1] \"frodo\" \"bilbo\" load_all('hobbits') ## ℹ Loading hobbits names(lotr()$hobbits) ## [1] \"frodo\" unloadNamespace('hobbits') ## Error: package 'hobbits' is required by 'lotr' so will not be detached devtools::unload('hobbits') lotr() ## Error in hobbits(): could not find function \"hobbits\" load_all('hobbits') ## ℹ Loading hobbits names(lotr()) ## [1] \"hobbits\" \"elves\"   \"dwarves\" \"humans\"  \"ainur\""},{"path":"/articles/demo.html","id":"using-srcpkgs","dir":"Articles","previous_headings":"","what":"using srcpkgs","title":"why would you need srcpkgs?","text":"","code":"library(srcpkgs) old <- options(width = 200) print(get_srcpkgs()) ##             package version                                                         path                     imports depends suggests ## aragorn     aragorn     0.1   /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/aragorn                                              ## bilbo         bilbo     0.1     /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/bilbo                                              ## elrond       elrond     0.1    /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/elrond                                              ## elves         elves     0.1     /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/elves           galadriel,legolas                  ## frodo         frodo     0.1     /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/frodo                                              ## galadriel galadriel     0.1 /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/galadriel                                              ## gandalf     gandalf     0.1   /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/gandalf                                              ## gimli         gimli     0.1     /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/gimli                                              ## hobbits     hobbits     0.1   /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/hobbits                       frodo   bilbo          ## legolas     legolas     0.1   /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/legolas                                              ## lotr           lotr     0.1      /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/lotr elves,gimli,aragorn,gandalf hobbits"},{"path":"/articles/demo.html","id":"unloading","dir":"Articles","previous_headings":"using srcpkgs","what":"unloading","title":"why would you need srcpkgs?","text":"srcpkgs::pkg_unload() takes account dependencies source packages. unload packages start clean state. also","code":"plan <- pkg_unload('bilbo') ## executing unload on lotr ## executing unload on hobbits ## executing unload on bilbo print(plan) ##   package action ## 1    lotr unload ## 2 hobbits unload ## 3   bilbo unload for (pkg in get_srcpkgs()) pkg_unload(pkg) ## executing unload on aragorn ## executing unload on elves ## executing unload on frodo ## executing unload on galadriel ## executing unload on gandalf ## executing unload on gimli ## executing unload on legolas"},{"path":"/articles/demo.html","id":"loading-1","dir":"Articles","previous_headings":"using srcpkgs","what":"loading","title":"why would you need srcpkgs?","text":"srcpkgs::pkg_load() takes care everything: roxygenizes packages needed, load appropriate order:","code":"plan <- pkg_load('lotr') ## executing load on aragorn ## ℹ Updating aragorn documentation ## ℹ Loading aragorn ## ℹ Loading aragorn ## executing load on bilbo ##  ## ℹ Updating bilbo documentation ## ℹ Loading bilbo ## ℹ Loading bilbo ## executing load on frodo ##  ## ℹ Updating frodo documentation ## ℹ Loading frodo ## ℹ Loading frodo ## executing load on galadriel ##  ## ℹ Updating galadriel documentation ## ℹ Loading galadriel ## ℹ Loading galadriel ## executing load on gandalf ##  ## ℹ Updating gandalf documentation ## ℹ Loading gandalf ## ℹ Loading gandalf ## executing load on gimli ##  ## ℹ Updating gimli documentation ## ℹ Loading gimli ## ℹ Loading gimli ## executing load on legolas ##  ## ℹ Updating legolas documentation ## ℹ Loading legolas ## ℹ Loading legolas ## executing load on elves ##  ## ℹ Updating elves documentation ## ℹ Loading elves ## ℹ Loading elves ## executing load on hobbits ##  ## ℹ Updating hobbits documentation ## ℹ Loading hobbits ## ℹ Loading hobbits ## executing load on lotr ##  ## ℹ Updating lotr documentation ## ℹ Loading lotr ## ℹ Loading lotr print(plan) ##      package action     params ## 1    aragorn   load       TRUE ## 2      bilbo   load TRUE, TRUE ## 3      frodo   load       TRUE ## 4  galadriel   load       TRUE ## 5    gandalf   load       TRUE ## 6      gimli   load       TRUE ## 7    legolas   load       TRUE ## 8      elves   load       TRUE ## 9    hobbits   load TRUE, TRUE ## 10      lotr   load TRUE, TRUE print(names(lotr())) ## [1] \"hobbits\" \"elves\"   \"dwarves\" \"humans\"  \"ainur\""},{"path":"/articles/demo.html","id":"editing-and-reloading-1","dir":"Articles","previous_headings":"using srcpkgs","what":"editing and reloading","title":"why would you need srcpkgs?","text":"Let’s edit frodo package, change weapon sting sword: Now let’s ask srcpkgs make sure lotr package --date: –> figured frodo modified, needed reloaded, dependents needed also properly unloaded re-loaded.","code":"lotr()$hobbits$frodo ## $first ## [1] \"Frodo\" ##  ## $last ## [1] \"Baggins\" ##  ## $weapons ## [1] \"sting\"        \"barrow-blade\" ##  ## $race ## [1] \"hobbit\" lines <- readLines('frodo/R/main.R') cat(lines, sep = '\\n') ## #' provides frodo ## #' @return as a list ## #' @export ## frodo <- function() { ##   list( ##     first = 'Frodo', ##     last = 'Baggins', ##     weapons = c('sting', 'barrow-blade'), ##     race = 'hobbit' ##   ) ## } edited_lines <- sub('sting', 'sword', lines) writeLines(edited_lines, 'frodo/R/main.R') plan <- pkg_load('lotr') ## package /tmp/RtmpBorVZS/file20ac305a1112/srcpkgs_lotr_demo/frodo has changed: R/main.R was \"modified\" ## executing unload on lotr ## executing unload on hobbits ## executing unload on frodo ## executing load on frodo ## ℹ Updating frodo documentation ## ℹ Loading frodo ## ℹ Loading frodo ## executing load on hobbits ##  ## ℹ Loading hobbits ## executing load on lotr ##  ## ℹ Loading lotr print(plan) ##   package action params ## 1    lotr unload   NULL ## 2 hobbits unload   NULL ## 3   frodo unload   NULL ## 4   frodo   load   TRUE ## 5 hobbits   load   TRUE ## 6    lotr   load   TRUE lotr()$hobbits$frodo$weapons ## [1] \"sword\"        \"barrow-blade\""},{"path":"/articles/getting_started.html","id":"use-the-lotr-dummy-collection-of-source-packages","dir":"Articles","previous_headings":"","what":"use the LOTR dummy collection of source packages","title":"Getting started","text":"illustrate use srcpkgs, need source packages. easy way experiment srcpkgs https://github.com/kforner/srcpkgs_lotr_demo repository: install srcpkgs package (cf https://kforner.github.io/srcpkgs/#installation) check https://github.com/kforner/srcpkgs_lotr_demo repository: start R session folder (type R):","code":"git clone https://github.com/kforner/srcpkgs_lotr_demo.git cd srcpkgs_lotr_demo # load srcpkgs >library(srcpkgs)"},{"path":"/articles/getting_started.html","id":"get_srcpkgs","dir":"Articles","previous_headings":"","what":"get_srcpkgs()","title":"Getting started","text":"get_srcpkgs() fetches list source packages currently managed srcpkgs. see packages srcpkgs_lotr_demo repository. function returns srcpkgs object, named list srcpkg objects. can print object, transform data frame using .data.frame().","code":"# let's see what source packages are discovered: > get_srcpkgs()             package version                                                path                     imports depends suggests aragorn     aragorn     0.1   /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/aragorn                                              bilbo         bilbo     0.1     /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/bilbo                                              elrond       elrond     0.1    /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/elrond                                              elves         elves     0.1     /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/elves         galadriel,\\nlegolas                  frodo         frodo     0.1     /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/frodo                                              galadriel galadriel     0.1 /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/galadriel                                              gandalf     gandalf     0.1   /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/gandalf                                              gimli         gimli     0.1     /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/gimli                                              hobbits     hobbits     0.1   /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/hobbits                       frodo   bilbo          legolas     legolas     0.1   /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/legolas                                              lotr           lotr     0.1      /workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/lotr elves,gimli,aragorn,gandalf hobbits pkgs <- get_srcpkgs() print(pkgs)  df <- as.data.frame(pkgs)"},{"path":[]},{"path":"/articles/getting_started.html","id":"hacked-r-loaders","dir":"Articles","previous_headings":"loading and reloading packages","what":"hacked R loaders","title":"Getting started","text":"Since default, R loaders automatically hacked srcpkgs (cf hack_r_loaders()), may simply load /ttach packages using library(), loadNamespace(), getNamespace, :: : rationale hacking R loaders just convenience. ’s also writing R code still work source packages installed.","code":"library(elves) loadNamespace('bilbo') frodo::frodo()"},{"path":"/articles/getting_started.html","id":"using-pkg_load","dir":"Articles","previous_headings":"loading and reloading packages","what":"using pkg_load()","title":"Getting started","text":"pkg_load() workhorse function load packages. major difference devtools::load_all() defaults source test helpers, export objects (cf export_all). rationale stick much possible standard R loaders behaviour. may use package name, path, package srcpkgs object designate package load:","code":"pkg_load('lotr') pkg_load('/workspaces/srcpkgs_pkg/srcpkgs_lotr_demo/lotr') pkg_load(pkgs$lotr)"},{"path":"/articles/getting_started.html","id":"updating","dir":"Articles","previous_headings":"loading and reloading packages > using pkg_load()","what":"updating","title":"Getting started","text":"execute pkg_load() package already loaded, check changes package also dependencies (among source packages), ’s needed roxygenize, unload, reload package --date inside R session.","code":""},{"path":"/articles/getting_started.html","id":"reset-and-settings","dir":"Articles","previous_headings":"","what":"reset and settings","title":"Getting started","text":"srcpkgs startup time, .e. library(srcpkgs) statement executed, R loaders automatically hacked (cf hack_r_loaders()) UNLESS hack inhibited using option srcpkgs.inhibit_r_loaders_hack environment variable SRCPKGS.INHIBIT_R_LOADERS_HACK. fist time get_srcpkgs() executed (example indirectly calling pkg_load()), srcpkgs figure project root, root search source packages, using heuristic. Since can take bit /O time, project root paths found source packages cached. may check using settings() function, can change using reset() function.","code":""},{"path":"/articles/testing_and_checking.html","id":"listing-the-lotr-collection-of-packages-with-srcpkgs","dir":"Articles","previous_headings":"","what":"listing the LOTR collection of packages with srcpkgs","title":"Testing and checking packages with srcpkgs","text":"","code":"library(srcpkgs) print(names(get_srcpkgs())) ##  [1] \"aragorn\"   \"bilbo\"     \"elrond\"    \"elves\"     \"frodo\"     \"galadriel\" ##  [7] \"gandalf\"   \"gimli\"     \"hobbits\"   \"legolas\"   \"lotr\" # cat(clitable::cli_table(as.data.frame(get_srcpkgs())), sep = \"\\n\")"},{"path":[]},{"path":"/articles/testing_and_checking.html","id":"no-tests-yet","dir":"Articles","previous_headings":"testing the collection","what":"no tests yet","title":"Testing and checking packages with srcpkgs","text":"LOTR collection come test. Let’s see happens … tests (nb == 0) testing successful since test failed…","code":"print(pkgs_test(reporter = \"silent\")) ## ## ── Test results by package ───────────────────────────────────────────────────── ## ╒═════════╤══╤══════╤══════╤═══════╤═════╤═══════╤════╕ ## │ package │nb│failed│passed│skipped│error│warning│time│ ## ╞═════════╪══╪══════╪══════╪═══════╪═════╪═══════╪════╡ ## │ aragorn │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ bilbo   │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ elrond  │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ elves   │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ frodo   │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │galadriel│ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ gandalf │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ gimli   │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ hobbits │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ legolas │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## │ lotr    │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## ╘═════════╧══╧══════╧══════╧═══════╧═════╧═══════╧════╛ ## ## ── Test results overview ─────────────────────────────────────────────────────── ## ╒═══════╤══╤══════╤══════╤═══════╤═════╤═══════╤════╕ ## │package│nb│failed│passed│skipped│error│warning│time│ ## ╞═══════╪══╪══════╪══════╪═══════╪═════╪═══════╪════╡ ## │ 11    │ 0│ 0    │ 0    │ 0     │ 0   │ 0     │ 0  │ ## ╘═══════╧══╧══════╧══════╧═══════╧═════╧═══════╧════╛ ##  ## SUCCESS"},{"path":"/articles/testing_and_checking.html","id":"adding-dummy-tests-to-the-packages","dir":"Articles","previous_headings":"testing the collection","what":"adding dummy tests to the packages","title":"Testing and checking packages with srcpkgs","text":"Let’s add programmatically dummy tests packages.","code":"add_dummy_test_to_srcpkg <- function(srcpkg, with_failures = TRUE, with_errors = TRUE, with_warnings = TRUE) {   withr::local_dir(srcpkg$path)   dir.create(\"tests/testthat\", recursive = TRUE, showWarnings = FALSE)    .write_test <- function(name, code, test = name) {     writeLines(sprintf(r\"-----{     test_that(\"%s\", {       %s     })     }-----\", name, code), sprintf(\"tests/testthat/test-%s.R\", test))   }    .write_test(\"success\", \"expect_true(TRUE)\")   if (with_failures) {     .write_test(\"failure\", \"expect_true(FALSE)\")     .write_test(\"mixed\", \"expect_true(FALSE);expect_true(TRUE)\")   }   .write_test(\"skip\", 'skip(\"skipping\");expect_true(FALSE)')   if (with_errors) .write_test(\"errors\", 'expect_true(TRUE);stop(\"Arghh\");expect_true(TRUE)')   if (with_warnings)  .write_test(\"warning\", 'expect_true(FALSE);warning(\"watch out\");expect_true(FALSE)')   if (with_failures && with_errors)     writeLines(r\"-----{     test_that(\"misc1\", {       expect_true(FALSE)       expect_true(TRUE)     })     test_that(\"misc2\", {       expect_true(FALSE)       skip(\"skipping\")     })     test_that(\"misc3\", {       expect_true(TRUE)       expect_true(TRUE)     })     test_that(\"misc4\", {       expect_true(TRUE)       warning(\"fais gaffe\")       stop(\"aie\")       expect_true(TRUE)     })     }-----\", \"tests/testthat/test-misc.R\")    writeLines(sprintf(r\"-----{     library(testthat)     library(%s)      test_check(\"%s\")   }-----\", srcpkg$package, srcpkg$package), \"tests/testthat.R\") } i <- 0 for (pkg in get_srcpkgs()) {   add_dummy_test_to_srcpkg(pkg, i %% 3 == 1, i %% 7 == 1, i %% 5 == 1)   i <- i + 1 }"},{"path":"/articles/testing_and_checking.html","id":"testing","dir":"Articles","previous_headings":"testing the collection","what":"testing","title":"Testing and checking packages with srcpkgs","text":"Now let’s test . Note markdown can ANSI colors formatting. ’s screenshot","code":"# N.B: we use the silent testthat reporter because we only want to get the results as tables test_results <- pkgs_test(reporter = \"silent\") print(test_results) ## ## ── Test results by package ───────────────────────────────────────────────────── ## ╒═════════╤══╤══════╤══════╤═══════╤═════╤═══════╤═════╕ ## │ package │nb│failed│passed│skipped│error│warning│ time│ ## ╞═════════╪══╪══════╪══════╪═══════╪═════╪═══════╪═════╡ ## │ aragorn │ 2│ 0    │ 1    │ 1     │ 0   │ 0     │ 0.02│ ## │ bilbo   │17│ 6    │ 7    │ 2     │ 2   │ 2     │0.423│ ## │ elrond  │ 2│ 0    │ 1    │ 1     │ 0   │ 0     │0.007│ ## │ elves   │ 2│ 0    │ 1    │ 1     │ 0   │ 0     │0.007│ ## │ frodo   │ 5│ 2    │ 2    │ 1     │ 0   │ 0     │ 0.05│ ## │galadriel│ 2│ 0    │ 1    │ 1     │ 0   │ 0     │0.006│ ## │ gandalf │ 5│ 2    │ 1    │ 1     │ 0   │ 1     │0.065│ ## │ gimli   │ 5│ 2    │ 2    │ 1     │ 0   │ 0     │0.051│ ## │ hobbits │ 3│ 0    │ 2    │ 1     │ 1   │ 0     │0.022│ ## │ legolas │ 2│ 0    │ 1    │ 1     │ 0   │ 0     │0.007│ ## │ lotr    │ 5│ 2    │ 2    │ 1     │ 0   │ 0     │0.049│ ## ╘═════════╧══╧══════╧══════╧═══════╧═════╧═══════╧═════╛ ## ## ── Test results overview ─────────────────────────────────────────────────────── ## ╒═══════╤══╤══════╤══════╤═══════╤═════╤═══════╤═════╕ ## │package│nb│failed│passed│skipped│error│warning│ time│ ## ╞═══════╪══╪══════╪══════╪═══════╪═════╪═══════╪═════╡ ## │ 11    │50│ 14   │ 21   │ 12    │ 3   │ 3     │0.707│ ## ╘═══════╧══╧══════╧══════╧═══════╧═════╧═══════╧═════╛ ##  ## FAILED"},{"path":"/articles/testing_and_checking.html","id":"using-the-test-results","dir":"Articles","previous_headings":"testing the collection","what":"using the test results","title":"Testing and checking packages with srcpkgs","text":"test results stored pkgs_test object, list named packages, pkg_test objects subclass testthat_results. can manipulate S3 methods: .data.frame() - converts results data frame one row per package summary() - converts results one-row data frame summarizes results collection packages .logical() - tells overall testing collection successful print() - prints results pretty tables S3 methods also implemented pkg_test objects.","code":"print(as.data.frame(test_results)) ##             package nb failed passed skipped error warning  time ## aragorn     aragorn  2      0      1       1     0       0 0.020 ## bilbo         bilbo 17      6      7       2     2       2 0.423 ## elrond       elrond  2      0      1       1     0       0 0.007 ## elves         elves  2      0      1       1     0       0 0.007 ## frodo         frodo  5      2      2       1     0       0 0.050 ## galadriel galadriel  2      0      1       1     0       0 0.006 ## gandalf     gandalf  5      2      1       1     0       1 0.065 ## gimli         gimli  5      2      2       1     0       0 0.051 ## hobbits     hobbits  3      0      2       1     1       0 0.022 ## legolas     legolas  2      0      1       1     0       0 0.007 ## lotr           lotr  5      2      2       1     0       0 0.049 print(summary(test_results)) ##   package nb failed passed skipped error warning  time ## 1      11 50     14     21      12     3       3 0.707 print(as.logical(test_results)) ## [1] FALSE print(test_results$bilbo) ## ## ── Test results by test for package bilbo ────────────────────────────────────── ## ╒═══════╤═══════╤══╤══════╤══════╤═══════╤═════╤═══════╤═══════════════════╕ ## │ file  │ test  │nb│failed│passed│skipped│error│warning│ time              │ ## ╞═══════╪═══════╪══╪══════╪══════╪═══════╪═════╪═══════╪═══════════════════╡ ## │ errors│ errors│ 1│ 0    │ 1    │ FALSE │ TRUE│ 0     │ 0.0220000000000002│ ## │failure│failure│ 1│ 1    │ 0    │ FALSE │FALSE│ 0     │ 0.195             │ ## │ misc  │ misc1 │ 2│ 1    │ 1    │ FALSE │FALSE│ 0     │ 0.0270000000000001│ ## │ misc  │ misc2 │ 2│ 1    │ 0    │ TRUE  │FALSE│ 0     │ 0.0270000000000001│ ## │ misc  │ misc3 │ 2│ 0    │ 2    │ FALSE │FALSE│ 0     │0.00800000000000001│ ## │ misc  │ misc4 │ 2│ 0    │ 1    │ FALSE │ TRUE│ 1     │ 0.0449999999999999│ ## │ mixed │ mixed │ 2│ 1    │ 1    │ FALSE │FALSE│ 0     │ 0.0289999999999999│ ## │ skip  │ skip  │ 1│ 0    │ 0    │ TRUE  │FALSE│ 0     │0.00300000000000011│ ## │success│success│ 1│ 0    │ 1    │ FALSE │FALSE│ 0     │0.00499999999999989│ ## │warning│warning│ 3│ 2    │ 0    │ FALSE │FALSE│ 1     │ 0.0619999999999994│ ## ╘═══════╧═══════╧══╧══════╧══════╧═══════╧═════╧═══════╧═══════════════════╛ ## ## ── Test results by file for package bilbo ────────────────────────────────────── ## ╒═══════╤══╤══════╤══════╤═══════╤═════╤═══════╤═══════════════════╕ ## │ file  │nb│failed│passed│skipped│error│warning│ time              │ ## ╞═══════╪══╪══════╪══════╪═══════╪═════╪═══════╪═══════════════════╡ ## │ errors│ 1│ 0    │ 1    │ 0     │ 1   │ 0     │ 0.0220000000000002│ ## │failure│ 1│ 1    │ 0    │ 0     │ 0   │ 0     │ 0.195             │ ## │ misc  │ 8│ 2    │ 4    │ 1     │ 1   │ 1     │ 0.107             │ ## │ mixed │ 2│ 1    │ 1    │ 0     │ 0   │ 0     │ 0.0289999999999999│ ## │ skip  │ 1│ 0    │ 0    │ 1     │ 0   │ 0     │0.00300000000000011│ ## │success│ 1│ 0    │ 1    │ 0     │ 0   │ 0     │0.00499999999999989│ ## │warning│ 3│ 2    │ 0    │ 0     │ 0   │ 1     │ 0.0619999999999994│ ## ╘═══════╧══╧══════╧══════╧═══════╧═════╧═══════╧═══════════════════╛ ## ## ── Test results overview for package bilbo ───────────────────────────────────── ## ╒══╤══════╤══════╤═══════╤═════╤═══════╤═════╕ ## │nb│failed│passed│skipped│error│warning│ time│ ## ╞══╪══════╪══════╪═══════╪═════╪═══════╪═════╡ ## │17│ 6    │ 7    │ 2     │ 2   │ 2     │0.423│ ## ╘══╧══════╧══════╧═══════╧═════╧═══════╧═════╛ print(as.data.frame(test_results$lotr)) ##      file    test nb failed passed skipped error warning  time ## 1 failure failure  1      1      0   FALSE FALSE       0 0.020 ## 2   mixed   mixed  2      1      1   FALSE FALSE       0 0.023 ## 3    skip    skip  1      0      0    TRUE FALSE       0 0.002 ## 4 success success  1      0      1   FALSE FALSE       0 0.004 print(summary(test_results$lotr)) ##      file nb failed passed skipped error warning  time ## 1 failure  1      1      0       0     0       0 0.020 ## 2   mixed  2      1      1       0     0       0 0.023 ## 3    skip  1      0      0       1     0       0 0.002 ## 4 success  1      0      1       0     0       0 0.004 print(as.logical(test_results$aragorn)) ## [1] TRUE"},{"path":"/articles/testing_and_checking.html","id":"checking-the-collection","dir":"Articles","previous_headings":"","what":"checking the collection","title":"Testing and checking packages with srcpkgs","text":"Checking similar testing except takes much longer!","code":""},{"path":"/articles/testing_and_checking.html","id":"fixing-the-collection-declare-testthat-as-dependency","dir":"Articles","previous_headings":"checking the collection","what":"fixing the collection: declare testthat as dependency","title":"Testing and checking packages with srcpkgs","text":"","code":".fix_description <- function(path, lst) {   df <- read.dcf(path, all = TRUE)   df2 <- utils::modifyList(df, lst)   write.dcf(df2, path) } for (pkg in get_srcpkgs()) {   .fix_description(file.path(pkg$path, \"DESCRIPTION\"), list(Suggests = \"testthat\")) }"},{"path":"/articles/testing_and_checking.html","id":"checking-the-packages","dir":"Articles","previous_headings":"checking the collection","what":"checking the packages","title":"Testing and checking packages with srcpkgs","text":"","code":"check_results <- pkgs_check(quiet = TRUE) ## ℹ Loading aragorn ## ℹ Loading bilbo ## ℹ Loading elrond ## ℹ Loading elves ## ℹ Loading frodo ## ℹ Loading galadriel ## ℹ Loading gandalf ## ℹ Loading gimli ## ℹ Loading hobbits ## ℹ Loading legolas ## ℹ Loading lotr print(check_results) ##  ## ── Check results by package ──────────────────────────────────────────────────── ## ╒═════════╤══════╤════════╤═════╤════╕ ## │ package │errors│warnings│notes│time│ ## ╞═════════╪══════╪════════╪═════╪════╡ ## │ aragorn │ 0    │ 0      │ 2   │8.98│ ## │ bilbo   │ 1    │ 0      │ 2   │ 9  │ ## │ elrond  │ 0    │ 0      │ 2   │8.58│ ## │ elves   │ 0    │ 0      │ 2   │8.97│ ## │ frodo   │ 1    │ 0      │ 2   │8.83│ ## │galadriel│ 0    │ 0      │ 2   │8.71│ ## │ gandalf │ 1    │ 0      │ 2   │8.99│ ## │ gimli   │ 1    │ 0      │ 2   │ 8.8│ ## │ hobbits │ 1    │ 0      │ 4   │9.13│ ## │ legolas │ 0    │ 0      │ 2   │8.85│ ## │ lotr    │ 1    │ 0      │ 4   │9.63│ ## ╘═════════╧══════╧════════╧═════╧════╛ ##  ## ── Check results overview ────────────────────────────────────────────────────── ## ╒═══════╤══════╤════════╤═════╤════╕ ## │package│errors│warnings│notes│time│ ## ╞═══════╪══════╪════════╪═════╪════╡ ## │ 11    │ 6    │ 0      │ 26  │98.5│ ## ╘═══════╧══════╧════════╧═════╧════╛ ##  ## FAILED"},{"path":"/articles/testing_and_checking.html","id":"using-the-check-results","dir":"Articles","previous_headings":"checking the collection","what":"using the check results","title":"Testing and checking packages with srcpkgs","text":"check results stored pkgs_check object, list named packages, pkg_check objects subclass rcmdcheck. pkgs_test results, can manipulate S3 methods: .data.frame() - converts results data frame one row per package summary() - converts results one-row data frame summarizes results collection packages .logical() - tells overall testing collection successful print() - prints results pretty tables","code":"print(as.data.frame(check_results)) ##             package errors warnings notes     time ## aragorn     aragorn      0        0     2 8.980364 ## bilbo         bilbo      1        0     2 9.002043 ## elrond       elrond      0        0     2 8.576615 ## elves         elves      0        0     2 8.966313 ## frodo         frodo      1        0     2 8.827897 ## galadriel galadriel      0        0     2 8.710237 ## gandalf     gandalf      1        0     2 8.994561 ## gimli         gimli      1        0     2 8.796664 ## hobbits     hobbits      1        0     4 9.131707 ## legolas     legolas      0        0     2 8.850893 ## lotr           lotr      1        0     4 9.627360 print(summary(check_results)) ##   package errors warnings notes     time ## 1      11      6        0    26 98.46465 print(as.logical(check_results)) ## [1] FALSE print(check_results$bilbo) ## ── R CMD check results ────────────────────────────────────────── bilbo 0.1 ──── ## Duration: 9s ##  ## ❯ checking tests ... ##   See below... ##  ## ❯ checking for hidden files and directories ... NOTE ##   Found the following hidden files and directories: ##     .SRCPKGS_MD5 ##   These were most likely included in error. See section ‘Package ##   structure’ in the ‘Writing R Extensions’ manual. ##  ## ❯ checking DESCRIPTION meta-information ... NOTE ##   License components which are templates and need '+ file LICENSE': ##     MIT ##  ## ── Test failures ───────────────────────────────────────────────── testthat ──── ##  ## >  ## >     library(testthat) ## >     library(bilbo) ## >  ## >     test_check(\"bilbo\") ## [ FAIL 8 | WARN 2 | SKIP 2 | PASS 7 ] ##  ## ══ Skipped tests (2) ═══════════════════════════════════════════════════════════ ## • skipping (2): test-misc.R:8:7, test-skip.R:3:7 ##  ## ══ Warnings ════════════════════════════════════════════════════════════════════ ## ── Warning (test-misc.R:16:7): misc4 ─────────────────────────────────────────── ## fais gaffe ## ── Warning (test-warning.R:3:26): warning ────────────────────────────────────── ## watch out ##  ## ══ Failed tests ════════════════════════════════════════════════════════════════ ## ── Error (test-errors.R:3:25): errors ────────────────────────────────────────── ## Error in `eval(code, test_env)`: Arghh ## ── Failure (test-failure.R:3:7): failure ─────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ## ── Failure (test-misc.R:3:7): misc1 ──────────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ## ── Failure (test-misc.R:7:7): misc2 ──────────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ## ── Error (test-misc.R:17:7): misc4 ───────────────────────────────────────────── ## Error in `eval(code, test_env)`: aie ## ── Failure (test-mixed.R:3:7): mixed ─────────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ## ── Failure (test-warning.R:3:7): warning ─────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ## ── Failure (test-warning.R:3:47): warning ────────────────────────────────────── ## FALSE is not TRUE ##  ## `actual`:   FALSE ## `expected`: TRUE  ##  ## [ FAIL 8 | WARN 2 | SKIP 2 | PASS 7 ] ## Error: Test failures ## Execution halted ##  ##   package errors warnings notes     time ## 1   bilbo      1        0     2 9.002043 print(as.data.frame(check_results$lotr)) ##   package errors warnings notes    time ## 1    lotr      1        0     4 9.62736 print(summary(check_results$lotr)) ##   package errors warnings notes    time ## 1    lotr      1        0     4 9.62736 print(as.logical(check_results$aragorn)) ## [1] TRUE"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karl Forner. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forner K (2025). srcpkgs: R Source Packages Manager. R package version 0.2, https://github.com/kforner/srcpkgs.","code":"@Manual{,   title = {srcpkgs: R Source Packages Manager},   author = {Karl Forner},   year = {2025},   note = {R package version 0.2},   url = {https://github.com/kforner/srcpkgs}, }"},{"path":"/index.html","id":"srcpkgs","dir":"","previous_headings":"","what":"R Source Packages Manager","title":"R Source Packages Manager","text":"aim srcpkgs make development use source packages easy, thus encourage continuously develop shared library reusable code.","code":""},{"path":"/index.html","id":"synopsis","dir":"","previous_headings":"","what":"Synopsis","title":"R Source Packages Manager","text":"Developing library packages can really tedious, especially dependencies packages. time change package, install able use . advent devtools enabled use source packages directly, bypassing installation step, considerably streamlined development ONE package, also making possible reload package within R session. srcpkgs extends devtools manage development use collection library source packages easily efficiently possible. particular, understands dependencies packages upon changes, determines optimal course action implement . See vignettes: need srcpkgs? Getting Started Testing checking packages srcpkgs)","code":""},{"path":"/index.html","id":"intended-target","dir":"","previous_headings":"","what":"intended target","title":"R Source Packages Manager","text":"main use case srcpkgs organization many R users, wants share reuses code across projects users. reusable code implemented collection R source packages. project code also implemented source package. way: - project version collection - project devs can easily adapt collection project (add features, fix bugs) R session used project - time, project devs can push changes collection recommended setup : course git repo per source package, dozends ’s cumbersome add git sub modules projects. Moreover ’s harder select compatible versions. collection add project git submodule can also useful single developer. allow easily reuse code across projects, avoiding duplication code. N.B: wrapping code source package convenience, really easy. ’s useful even plan releasing distributing package.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R Source Packages Manager","text":"fast automatic discovery source packages fast automatic detection changes: quickly unload/reload/load needed. apply roxygen (cf roxygen2) automatically needed can hack R loaders (library() loadNamespace()) use srcpkgs development, scripts still work install packages (e.g. Production mode) testing whole collection , output aggregated report (using testthat course). R CMD checking collection extensively tested (~ 450 tests) 100% test coverage","code":""},{"path":"/index.html","id":"forthcoming","dir":"","previous_headings":"Features","what":"forthcoming","title":"R Source Packages Manager","text":"testing checking collection parallel test coverage collection","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Source Packages Manager","text":"package now available CRAN! Install CRAN: Install github:","code":"install.packages('srcpkgs') ### using devtools # install devtools from CRAN if needed install.packages('devtools')  install_github('kforner/srcpkgs')  ### or using pak # install pak from CRAN if needed install.packages('pak') pak::pak(\"kforner/srcpkgs\")"},{"path":"/reference/find_srcpkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"finds all available source packages starting from the project root — find_srcpkgs","title":"finds all available source packages starting from the project root — find_srcpkgs","text":"N.B: hidden files directories ignored. general, function used directly, instead use get_srcpkgs()","code":""},{"path":"/reference/find_srcpkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"finds all available source packages starting from the project root — find_srcpkgs","text":"","code":"find_srcpkgs(   root = get_project_root(),   srcpkgs_paths = find_srcpkgs_paths(root, prune = prune),   prune = TRUE )"},{"path":"/reference/find_srcpkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"finds all available source packages starting from the project root — find_srcpkgs","text":"root directory search source packages srcpkgs_paths paths source packages folders prune whether report packages contained inside another package (e.g. tests/)","code":""},{"path":"/reference/find_srcpkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"finds all available source packages starting from the project root — find_srcpkgs","text":"\"srcpkgs\" object (NULL none found), named list \"srcpkg\" objects, essentially devtools \"package\" objects. list named package names.","code":""},{"path":"/reference/find_srcpkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"finds all available source packages starting from the project root — find_srcpkgs","text":"","code":"find_srcpkgs('.') #> NULL"},{"path":"/reference/get_srcpkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"get the current source packages list — get_srcpkgs","title":"get the current source packages list — get_srcpkgs","text":"first call function trigger initialization package ((cf reset()). Since used mostly user-facing load-related functions, enables runtime initialization, opposed load-time initialization. example may load srcpkgs, change current directory project. first load setup settings.","code":""},{"path":"/reference/get_srcpkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the current source packages list — get_srcpkgs","text":"","code":"get_srcpkgs(filter = NULL)"},{"path":"/reference/get_srcpkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the current source packages list — get_srcpkgs","text":"filter pattern filter source packages","code":""},{"path":"/reference/get_srcpkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the current source packages list — get_srcpkgs","text":"source packages \"scrpkgs\" object, cf find_srcpkgs(), NULL none","code":""},{"path":"/reference/get_srcpkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get the current source packages list — get_srcpkgs","text":"optimization, paths discovered source packages cached (cf reset() settings(). function reparse DESCRIPTION change. add delete source package, must reset source package paths using reset() function useful troubleshooting, understand source packages discovered managed srcpkgs","code":""},{"path":"/reference/get_srcpkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the current source packages list — get_srcpkgs","text":"","code":"pkgs <- get_srcpkgs() print(pkgs) #>         package version                              path #> srcpkgs srcpkgs     0.2 /home/runner/work/srcpkgs/srcpkgs #>                                                    imports depends #> srcpkgs cli,clitable,devtools,pkgload,testthat,stats,utils         #>                      suggests #> srcpkgs knitr,rmarkdown,withr"},{"path":"/reference/hack_r_loaders.html","id":null,"dir":"Reference","previous_headings":"","what":"instruments the R loaders to make them aware of source packages — hack_r_loaders","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"hacks library() loadNamespace() using base R tracer function trace(). library(pkg) basically call pkg_load(pkg) source package pkg managed srcpkgs","code":""},{"path":"/reference/hack_r_loaders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"","code":"hack_r_loaders()"},{"path":"/reference/hack_r_loaders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"return value, called side-effects","code":""},{"path":"/reference/hack_r_loaders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"N.B: usually need call function explicitly. function reentrant.","code":""},{"path":"/reference/hack_r_loaders.html","id":"package-startup","dir":"Reference","previous_headings":"","what":"Package startup","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"package startup (actually .OnAttach()), hack_r_loaders() automatically called hack R loaders, UNLESS inhibited via option srcpkgs.inhibit_r_loaders_hack environment variable SRCPKGS.INHIBIT_R_LOADERS_HACK. may set value like TRUE, \"TRUE\", 1 \"1\".","code":""},{"path":[]},{"path":"/reference/hack_r_loaders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"instruments the R loaders to make them aware of source packages — hack_r_loaders","text":"","code":"# \\donttest{ # hack library hack_r_loaders()  # unhack unhack_r_loaders()  # prevent automatic hacking when srcpkgs is loaded options(srcpkgs.inhibit_r_loaders_hack=TRUE) # or Sys.setenv(SRCPKGS.INHIBIT_R_LOADERS_HACK=\"1\") library(srcpkgs) # }"},{"path":"/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"shared params — params","title":"shared params — params","text":"shared params","code":""},{"path":"/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shared params — params","text":"dry_run whether actually execute action side-effects lib directory install find installed pkgs pkg package \"srcpkg\" object pkgs packages \"srcpkgs\" object pkg_name package name, character pkg_or_name package name object (\"package\" \"srcpkg\") pkg_path package path, character pkgid package name, path package object pkgids list package ids (names, paths object), srcpkgs object. Also accept singleton package object md5 MD5 hash source package progress whether display progress bar roxygen whether roxygenize src_pkgs collection source packages srckgs object. srcpkgs_paths paths source packages folders root directory search source packages quiet whether quiet/silent test_filter pattern select testthat tests run. Test files names test-xxxxx.R xxxxx test name. test files whose name match pattern run. test_parallel whether run package tests parallel","code":""},{"path":"/reference/pkg_check.html","id":null,"dir":"Reference","previous_headings":"","what":"tests a package - runs R CMD check — pkg_check","title":"tests a package - runs R CMD check — pkg_check","text":"function check source package.","code":""},{"path":"/reference/pkg_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tests a package - runs R CMD check — pkg_check","text":"","code":"pkg_check(   pkgid,   src_pkgs = get_srcpkgs(),   lib = \".check\",   roxygen = TRUE,   quiet = FALSE,   error_on = \"error\",   check_system_clock = FALSE,   ... )"},{"path":"/reference/pkg_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tests a package - runs R CMD check — pkg_check","text":"pkgid package name, path package object src_pkgs collection source packages srckgs object. lib directory install find installed pkgs roxygen whether roxygenize quiet whether quiet/silent error_on passed devtools::check() check_system_clock FALSE, disable _R_CHECK_SYSTEM_CLOCK_ check. check sometimes fail firewalls... ... passed devtools::check()","code":""},{"path":"/reference/pkg_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tests a package - runs R CMD check — pkg_check","text":"results pkg_test object, NULL tests found","code":""},{"path":"/reference/pkg_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tests a package - runs R CMD check — pkg_check","text":"","code":"if (FALSE) { # \\dontrun{  pkg_test(\"mypkg\") } # }"},{"path":"/reference/pkg_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates and populates a R package-like folder programmatically, useful for writing tests — pkg_create","title":"creates and populates a R package-like folder programmatically, useful for writing tests — pkg_create","text":"basically wrapper around utils::package.skeleton()","code":""},{"path":"/reference/pkg_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates and populates a R package-like folder programmatically, useful for writing tests — pkg_create","text":"","code":"pkg_create(   dir,   name,   functions = list(dummy = function() \"DUMMY\"),   imports = NULL,   depends = NULL,   suggests = NULL,   namespace = FALSE,   roxygen_imports = FALSE,   ignore_hidden_files = TRUE )"},{"path":"/reference/pkg_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates and populates a R package-like folder programmatically, useful for writing tests — pkg_create","text":"dir directory create package, string name package name, string functions named list functions add package imports \"imports\" dependencies depends \"depends\" dependencies suggests \"suggests\" dependencies namespace whether write namespace file (currently applicable imports. N.B: namespace file generated, roxygen refuse update roxygen_imports whether write roxygen statements defined imports ignore_hidden_files whether create .Rbuildignore file ignore hidden files.","code":""},{"path":"/reference/pkg_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates and populates a R package-like folder programmatically, useful for writing tests — pkg_create","text":"srcpkg instance, invisibly","code":""},{"path":"/reference/pkg_list_attached.html","id":null,"dir":"Reference","previous_headings":"","what":"lists the packages that are attached, i.e. present in the R search() path — pkg_list_attached","title":"lists the packages that are attached, i.e. present in the R search() path — pkg_list_attached","text":"lists packages attached, .e. present R search() path","code":""},{"path":"/reference/pkg_list_attached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lists the packages that are attached, i.e. present in the R search() path — pkg_list_attached","text":"","code":"pkg_list_attached()"},{"path":"/reference/pkg_load.html","id":null,"dir":"Reference","previous_headings":"","what":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"N.B: defaults different devtools::load_all(): helpers loaded, functions tagged exported actually exported. intended goal make similar behaviour R loaders.","code":""},{"path":"/reference/pkg_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"","code":"pkg_load(   pkgid,   src_pkgs = get_srcpkgs(),   attach = TRUE,   suggests = FALSE,   roxygen = TRUE,   helpers = FALSE,   export_all = FALSE,   quiet = FALSE,   dry_run = FALSE,   ... )"},{"path":"/reference/pkg_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"pkgid package name, path package object src_pkgs collection source packages srckgs object. attach Whether attach package environment search path. FALSE load_all() behaves like loadNamespace(). TRUE (default), behaves like library(). FALSE, export_all, export_imports, helpers arguments effect. suggests whether load suggested packages. TRUE, suggested processed like imports roxygen whether automatically roxygenise packages (needed) helpers TRUE loads testthat test helpers. export_all TRUE (default), export objects. FALSE, export objects listed exports NAMESPACE file. quiet whether quiet/silent dry_run whether actually execute action side-effects ... Arguments passed devtools::load_all path Path package, within package. reset clear package environment reset file cache loading pieces package. largely equivalent running unload(), however old namespaces completely removed .onUnload() hooks called. Use reset = FALSE may faster large code bases, significantly less accurate approximation. recompile DEPRECATED. force recompile DLL source code, present. equivalent running pkgbuild::clean_dll() load_all","code":""},{"path":"/reference/pkg_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"load plan data frame, NULL nothing .","code":""},{"path":"/reference/pkg_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"workhorse function package, called library() loadNamespace() hacked (cf hack_r_loaders(). function check dependent packages --date, document reload needed. able properly load package, dependent source packages must loaded proper order. .e. –>B–>C, load order must C, B, ","code":""},{"path":"/reference/pkg_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"loads or reloads if needed a source package, taking care of its dependencies — pkg_load","text":"","code":"if (FALSE) { # \\dontrun{ # N.B: This example is wrapped in \\dontrun as it cannot be executed since it requires  # a source package to load.  # load and attach a package pkg_load('mypkg')  # just load, do not attach it (~ loadNamespace()) pkg_load('mypkg', attach = FALSE)  # do some changes, to a source package or any of its depencies or dependents plan <- pkg_load('mypkg', dry_run = TRUE) # then you can inspect the plan actions  } # }"},{"path":"/reference/pkg_roxygenise.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygenize a source package if needed — pkg_roxygenise","title":"roxygenize a source package if needed — pkg_roxygenise","text":"package changed (based md5sum file), nothing otherwise roxygenise package using roxygen2::roxygenise update save new md5sum file","code":""},{"path":"/reference/pkg_roxygenise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygenize a source package if needed — pkg_roxygenise","text":"","code":"pkg_roxygenise(pkg_path, force = FALSE, quiet = FALSE, ...)"},{"path":"/reference/pkg_roxygenise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygenize a source package if needed — pkg_roxygenise","text":"pkg_path package path, character force force(d), use md5-based system detect package changes quiet whether quiet/silent ... passed  devtools::document()","code":""},{"path":"/reference/pkg_roxygenise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"roxygenize a source package if needed — pkg_roxygenise","text":"roxygenation performed","code":""},{"path":"/reference/pkg_roxygenise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"roxygenize a source package if needed — pkg_roxygenise","text":"N.B: side-effect loading package","code":""},{"path":"/reference/pkg_test.html","id":null,"dir":"Reference","previous_headings":"","what":"tests a package - runs its unit tests — pkg_test","title":"tests a package - runs its unit tests — pkg_test","text":"function test source package using testthat, making sure package source package dependencies --date loaded","code":""},{"path":"/reference/pkg_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tests a package - runs its unit tests — pkg_test","text":"","code":"pkg_test(   pkgid,   filter = NULL,   src_pkgs = get_srcpkgs(),   export_all = TRUE,   quiet = TRUE,   ... )"},{"path":"/reference/pkg_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tests a package - runs its unit tests — pkg_test","text":"pkgid package name, path package object filter filter tests run. cf testthat::test_dir() src_pkgs collection source packages srckgs object. export_all passed pkg_load(). Enables test functions easily access non-exported functions. Caveat: pkg already loaded --date export_all=FALSE, work. quiet whether quiet/silent ... passed testthat::test_dir()","code":""},{"path":"/reference/pkg_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tests a package - runs its unit tests — pkg_test","text":"results pkg_test object, empty listL tests found","code":""},{"path":"/reference/pkg_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tests a package - runs its unit tests — pkg_test","text":"","code":"if (FALSE) { # \\dontrun{  pkg_test(\"mypkg\") } # }"},{"path":"/reference/pkg_unload.html","id":null,"dir":"Reference","previous_headings":"","what":"unloads a package, unloading its dependent packages if needed — pkg_unload","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"able unload properly package, packages depend even indirectly unloaded first.","code":""},{"path":"/reference/pkg_unload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"","code":"pkg_unload(   pkg_or_name,   src_pkgs = get_srcpkgs(),   dry_run = FALSE,   loaded = loadedNamespaces(),   quiet = FALSE )"},{"path":"/reference/pkg_unload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"pkg_or_name package name object (\"package\" \"srcpkg\") src_pkgs collection source packages srckgs object. dry_run whether actually execute action side-effects loaded loaded packages, useful testing. quiet whether quiet/silent","code":""},{"path":"/reference/pkg_unload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"data frame unloaded package names, whether attached, invisibly NULL package loaded","code":""},{"path":"/reference/pkg_unload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"N.B: function also works non source packages.","code":""},{"path":"/reference/pkg_unload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"unloads a package, unloading its dependent packages if needed — pkg_unload","text":"","code":"# \\donttest{ plan <- pkg_unload('mypkg') # }"},{"path":"/reference/pkgs_check.html","id":null,"dir":"Reference","previous_headings":"","what":"checks a list of source packages — pkgs_check","title":"checks a list of source packages — pkgs_check","text":"checks list source packages","code":""},{"path":"/reference/pkgs_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks a list of source packages — pkgs_check","text":"","code":"pkgs_check(   pkgids = names(filter_srcpkgs(src_pkgs, filter)),   src_pkgs = get_srcpkgs(),   filter = NULL,   lib = \".check\",   quiet = FALSE,   fail_on_error = FALSE,   ... )"},{"path":"/reference/pkgs_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks a list of source packages — pkgs_check","text":"pkgids list package ids (names, paths object), srcpkgs object. Also accept singleton package object src_pkgs collection source packages srckgs object. filter filter packages check using pattern lib directory install find installed pkgs quiet whether quiet/silent fail_on_error whether die least error warning checks ... passed pkg_check","code":""},{"path":"/reference/pkgs_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks a list of source packages — pkgs_check","text":"results pkgs_test object","code":""},{"path":"/reference/pkgs_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"computes the dependencies of some (source) packages — pkgs_deps","title":"computes the dependencies of some (source) packages — pkgs_deps","text":"computes dependencies (source) packages","code":""},{"path":"/reference/pkgs_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"computes the dependencies of some (source) packages — pkgs_deps","text":"","code":"pkgs_deps(   pkgids,   src_pkgs = find_srcpkgs(),   source = TRUE,   installed = TRUE,   imports = TRUE,   depends = TRUE,   suggests = TRUE,   reverse = FALSE )"},{"path":"/reference/pkgs_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"computes the dependencies of some (source) packages — pkgs_deps","text":"pkgids list package ids (names, paths object), srcpkgs object. Also accept singleton package object src_pkgs collection source packages srckgs object. source whether report source packages installed whether report installed (non-source) packages imports whether consider imports dependencies depends whether consider depends dependencies suggests whether consider suggests dependencies reverse whether compute reverse dependencies instead","code":""},{"path":"/reference/pkgs_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"computes the dependencies of some (source) packages — pkgs_deps","text":"dependencies, character vector, topologically sorted","code":""},{"path":"/reference/pkgs_install.html","id":null,"dir":"Reference","previous_headings":"","what":"installs a list of source packages — pkgs_install","title":"installs a list of source packages — pkgs_install","text":"source package can installed dependencies . reinstall packages --date roxygenise packages needed","code":""},{"path":"/reference/pkgs_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"installs a list of source packages — pkgs_install","text":"","code":"pkgs_install(   pkgids,   lib,   src_pkgs = get_srcpkgs(),   only_deps = FALSE,   quiet = TRUE,   ... )"},{"path":"/reference/pkgs_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"installs a list of source packages — pkgs_install","text":"pkgids list package ids (names, paths object), srcpkgs object. Also accept singleton package object lib directory install find installed pkgs src_pkgs collection source packages srckgs object. only_deps whether include pkgids, dependencies. quiet whether quiet/silent ... passed devtools::install()","code":""},{"path":"/reference/pkgs_install.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"installs a list of source packages — pkgs_install","text":"names packages actually installed","code":""},{"path":"/reference/pkgs_test.html","id":null,"dir":"Reference","previous_headings":"","what":"tests a list of source packages — pkgs_test","title":"tests a list of source packages — pkgs_test","text":"tests list source packages","code":""},{"path":"/reference/pkgs_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tests a list of source packages — pkgs_test","text":"","code":"pkgs_test(   pkgids = names(filter_srcpkgs(src_pkgs, filter)),   src_pkgs = get_srcpkgs(),   filter = NULL,   quiet = TRUE,   ... )"},{"path":"/reference/pkgs_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tests a list of source packages — pkgs_test","text":"pkgids list package ids (names, paths object), srcpkgs object. Also accept singleton package object src_pkgs collection source packages srckgs object. filter filter packages test using pattern quiet whether quiet/silent ... passed pkg_test","code":""},{"path":"/reference/pkgs_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tests a list of source packages — pkgs_test","text":"results pkgs_test object","code":""},{"path":"/reference/reset.html","id":null,"dir":"Reference","previous_headings":"","what":"resets the srcpkgs settings — reset","title":"resets the srcpkgs settings — reset","text":"function, can reset set precisely settings.","code":""},{"path":"/reference/reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resets the srcpkgs settings — reset","text":"","code":"reset(root = find_project_root(), srcpkgs_paths = find_srcpkgs_paths(root))"},{"path":"/reference/reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resets the srcpkgs settings — reset","text":"root directory search source packages srcpkgs_paths paths source packages folders","code":""},{"path":"/reference/reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resets the srcpkgs settings — reset","text":"settings (cf settings()) invisibly","code":""},{"path":"/reference/reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"resets the srcpkgs settings — reset","text":"","code":"# \\donttest{ # reset to appropriate defaults based on your current directory reset()  # explictly set the project root reset(root = tempdir())  # explictly set the source package paths (very unlikely) reset(srcpkgs_paths = c('pkgs/mypkg1', 'pkgs/mypkg2')) # }"},{"path":"/reference/settings.html","id":null,"dir":"Reference","previous_headings":"","what":"informs about the settings currently used by srcpkgs — settings","title":"informs about the settings currently used by srcpkgs — settings","text":"informs settings currently used srcpkgs","code":""},{"path":"/reference/settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"informs about the settings currently used by srcpkgs — settings","text":"","code":"settings()"},{"path":"/reference/settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"informs about the settings currently used by srcpkgs — settings","text":"named list : initialized: whether settings initialized (triggered get_srcpkgs()) root: project root srcpkgs_paths: paths source packages manage hack_r_loaders_installed: whether R loaders hacked hack_r_loaders_enabled: whether R loaded hack action (internal use)","code":""},{"path":"/reference/srcpkgs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"srcpkgs: R Source Packages Manager — srcpkgs-package","title":"srcpkgs: R Source Packages Manager — srcpkgs-package","text":"Manage collection/library R source packages. Discover, document, load, test source packages. Enable use packages actually installed. Quickly reload needed source code change. Run tests checks parallel.","code":""},{"path":"/reference/srcpkgs-package.html","id":"features","dir":"Reference","previous_headings":"","what":"Features","title":"srcpkgs: R Source Packages Manager — srcpkgs-package","text":"srcpkgs main objective ease development project uses collection R source packages (library). able figure dependencies source packages, able quickly detect changes used source packages.","code":""},{"path":[]},{"path":"/reference/srcpkgs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"srcpkgs: R Source Packages Manager — srcpkgs-package","text":"Maintainer: Karl Forner karl.forner@gmail.com [copyright holder]","code":""},{"path":"/reference/unhack_r_loaders.html","id":null,"dir":"Reference","previous_headings":"","what":"untraces library() and loadNamespace() — unhack_r_loaders","title":"untraces library() and loadNamespace() — unhack_r_loaders","text":"function reentrant.","code":""},{"path":"/reference/unhack_r_loaders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"untraces library() and loadNamespace() — unhack_r_loaders","text":"","code":"unhack_r_loaders()"},{"path":"/reference/unhack_r_loaders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"untraces library() and loadNamespace() — unhack_r_loaders","text":"return value, called side-effects","code":""},{"path":[]},{"path":"/news/index.html","id":"srcpkgs-02","dir":"Changelog","previous_headings":"","what":"srcpkgs 0.2","title":"srcpkgs 0.2","text":"added vignette Testing checking packages srcpkgs exported pkg_attach() pkg_list_attached() exported pkg_roxygenise() added pkg_check() pkgs_check() now pkgs_test() accepts types input first main param (via as_srpkgs()) fixed pkg_load() package already loaded date attached","code":""},{"path":"/news/index.html","id":"srcpkgs-01","dir":"Changelog","previous_headings":"","what":"srcpkgs 0.1","title":"srcpkgs 0.1","text":"CRAN release: 2024-05-15 added two vignettes, getting ready initial CRAN submission","code":""}]
